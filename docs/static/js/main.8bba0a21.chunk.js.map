{"version":3,"sources":["thunks/NoteThunks.ts","actions/NoteActions.ts","constants/ActionTypes.ts","components/notes/NotesAddForm.tsx","components/notes/NotesListItem.tsx","components/notes/NotesList.tsx","components/Panel.tsx","components/PanelGroup.tsx","actions/PostActions.ts","thunks/PostThunks.ts","components/posts/PostsAddForm.tsx","thunks/DairyThunks.ts","actions/DairyActions.ts","components/posts/PostsListItem.tsx","components/posts/PostsList.tsx","components/Sidebar.tsx","store/Store.ts","components/Dairy.tsx","store/LocalStoreSource.ts","reducers/DairyReducer.ts","reducers/NoteReducer.ts","reducers/PostReducer.ts","index.tsx"],"names":["createNoteThunk","postId","message","dispatch","getState","source","note","type","createNote","NotesAddForm_NotesAddForm","_super","NotesAddForm","props","_this","call","this","handleKeyDown","event","stopPropagation","keyCode","ctrlKey","inputRef","current","value","trim","react","__extends","prototype","render","onKeyDown","className","ref","components_notes_NotesAddForm","es","state","selectedPostId","NotesListItem_NotesListItem","_a","color","avatar","toString","length","repeat","style","backgroundColor","dangerouslySetInnerHTML","__html","replace","NotesList","listRef","NotesList_extends","lodash","notesList","map","key","id","componentDidMount","scrollListDown","componentDidUpdate","scrollTop","scrollHeight","Panel_Panel","title","children","PanelGroup_PanelGroup","createPostThunk","post","createPost","removePostThunk","removePost","PostsAddForm_PostsAddForm","PostsAddForm","handleSubmit","preventDefault","PostsAddForm_extends","onSubmit","placeholder","autoComplete","components_posts_PostsAddForm","selectPostThunk","selectPost","loadNotesList","PostsListItem_PostsListItem","PostsListItem","apply","arguments","handleRemoveClick","handleSelectClick","PostsListItem_extends","onClick","isSelected","notesNum","components_posts_PostsListItem","__assign","PostsList_PostsList","postsList","reverse","Sidebar_Sidebar","description","store","Dairy_Dairy","Dairy","Dairy_extends","components_notes_NotesList","src_components_Dairy","LocalStoreSource","createInitialState","tryLoadState","nextPostId","nextNoteId","createDeepClone","JSON","parse","stringify","loadPostsList","trySaveState","Math","ceil","random","removeNote","noteId","loadDairy","localStorage","DairyReducer","action","NoteReducer","NoteReducer_assign","_b","_c","_d","_e","PostReducer","PostReducer_assign","react_dom","store_LocalStoreSource","redux","redux_thunk_es","withExtraArgument","document","querySelector"],"mappings":"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","file":"static/js/main.8bba0a21.chunk.js","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { createNote, CreateNote, removeNote, RemoveNote } from \"../actions/NoteActions\";\r\nimport IStoreSource from \"../store/IStoreSource\";\r\nimport IDairy from \"../types/IDairy\";\r\n\r\nexport const createNoteThunk = (postId:number, message:string) => {\r\n    return (dispatch:Dispatch<CreateNote>, getState:() => IDairy, source:IStoreSource):CreateNote => {\r\n        return dispatch(createNote(postId, source.createNote(postId, message)));\r\n    };\r\n};\r\n\r\nexport const removeNoteThunk = (postId:number, noteId:number) => {\r\n    return (dispatch:Dispatch<RemoveNote>, getState:() => IDairy, source:IStoreSource):RemoveNote => {\r\n        return dispatch(removeNote(postId, source.removeNote(postId, noteId)));\r\n    };\r\n};\r\n","import { CREATE_NOTE, REMOVE_NOTE } from \"../constants/ActionTypes\";\r\nimport INote from \"../types/INote\";\r\n\r\nexport interface CreateNote {\r\n    type:CREATE_NOTE;\r\n    postId:number;\r\n    note:INote;\r\n}\r\n\r\nexport const createNote = (postId:number, note:INote):CreateNote => {\r\n    return {\r\n        type: CREATE_NOTE,\r\n        postId,\r\n        note\r\n    };\r\n};\r\n\r\nexport interface RemoveNote {\r\n    type:REMOVE_NOTE;\r\n    postId:number;\r\n    note:INote;\r\n}\r\n\r\nexport const removeNote = (postId:number, note:INote):RemoveNote => {\r\n    return {\r\n        type: REMOVE_NOTE,\r\n        postId,\r\n        note\r\n    };\r\n};\r\n\r\nexport type NoteActions = (\r\n    CreateNote |\r\n    RemoveNote\r\n);\r\n","export const SELECT_POST = \"SELECT_POST\";\r\nexport type SELECT_POST = typeof SELECT_POST;\r\n\r\nexport const CREATE_POST = \"CREATE_POST\";\r\nexport type CREATE_POST = typeof CREATE_POST;\r\n\r\nexport const REMOVE_POST = \"REMOVE_POST\";\r\nexport type REMOVE_POST = typeof REMOVE_POST;\r\n\r\nexport const CREATE_NOTE = \"CREATE_NOTE\";\r\nexport type CREATE_NOTE = typeof CREATE_NOTE;\r\n\r\nexport const REMOVE_NOTE = \"REMOVE_NOTE\";\r\nexport type REMOVE_NOTE = typeof REMOVE_NOTE;\r\n","import * as React from \"react\";\r\nimport * as Redux from \"react-redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { CreateNote } from \"../../actions/NoteActions\";\r\nimport IStoreSource from \"../../store/IStoreSource\";\r\nimport { createNoteThunk } from \"../../thunks/NoteThunks\";\r\nimport IDairy from \"../../types/IDairy\";\r\nimport \"./NotesAddForm.css\";\r\n\r\ninterface INotesAddFormProps {\r\n    dispatch:ThunkDispatch<IDairy, IStoreSource, CreateNote>;\r\n    postId:number;\r\n}\r\n\r\nclass NotesAddForm extends React.Component<INotesAddFormProps> {\r\n    public inputRef:React.RefObject<HTMLTextAreaElement>;\r\n\r\n    public constructor(props:INotesAddFormProps) {\r\n        super(props);\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    public render():JSX.Element {\r\n        return (\r\n            <form onKeyDown={ this.handleKeyDown } className=\"NotesAddForm\">\r\n                <div className=\"avatar\" />\r\n                <textarea ref={ this.inputRef } className=\"message form-control\" />\r\n            </form>\r\n        );\r\n    }\r\n\r\n    private handleKeyDown = (event:React.KeyboardEvent):void => {\r\n        event.stopPropagation();\r\n\r\n        if (event.keyCode !== 13 || !event.ctrlKey) {\r\n            return;\r\n        }\r\n\r\n        if (this.inputRef.current != null) {\r\n            const value = this.inputRef.current.value.trim();\r\n            if (value) {\r\n                this.props.dispatch(createNoteThunk(this.props.postId, value));\r\n                this.inputRef.current.value = '';\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default Redux.connect(\r\n    (state:IDairy) => {\r\n        return {\r\n            postId: state.selectedPostId\r\n        }\r\n    }\r\n)(\r\n    NotesAddForm\r\n);\r\n","import * as React from \"react\";\r\nimport INote from \"../../types/INote\";\r\nimport \"./NotesListItem.css\";\r\n\r\ninterface INotesListItemProps {\r\n    note:INote;\r\n}\r\n\r\nexport default function NotesListItem({ note }:INotesListItemProps):JSX.Element {\r\n    let color = note.avatar.toString(16);\r\n    if (color.length < 6) {\r\n        color = '0'.repeat(6 - color.length) + color;\r\n    }\r\n\r\n    return (\r\n        <div className=\"NotesListItem\">\r\n            <div className=\"avatar\" style={{ backgroundColor: '#' + color }} />\r\n            <div className=\"message\"\r\n                dangerouslySetInnerHTML={{ __html: note.message.replace(/\\n/gi, '<br />') }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import * as Lodash from \"lodash\";\r\nimport * as React from \"react\";\r\nimport INote from \"../../types/INote\";\r\nimport INotesList from \"../../types/INotesList\";\r\nimport \"./NotesList.css\";\r\nimport NotesListItem from \"./NotesListItem\";\r\n\r\ninterface INotesListProps {\r\n    notesList:INotesList;\r\n}\r\n\r\nexport default class NotesList extends React.Component<INotesListProps> {\r\n    public listRef:React.RefObject<HTMLDivElement>;\r\n\r\n    public constructor(props:INotesListProps) {\r\n        super(props);\r\n        this.listRef = React.createRef();\r\n    }\r\n\r\n    public render():JSX.Element {\r\n        return (\r\n            <div className=\"NotesList\" ref={ this.listRef }>\r\n                {\r\n                    Lodash.values(this.props.notesList).map(\r\n                        (note:INote) => {\r\n                            return (\r\n                                <NotesListItem key={ note.id } note={ note } />\r\n                            );\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.scrollListDown();\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        this.scrollListDown();\r\n    }\r\n\r\n    private scrollListDown() {\r\n        if (this.listRef.current != null) {\r\n            this.listRef.current.scrollTop = this.listRef.current.scrollHeight;\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./Panel.css\";\r\n\r\ninterface IPanelProps {\r\n    children?:React.ReactNode;\r\n    title:string;\r\n}\r\n\r\nexport default function Panel({ title, children }:IPanelProps):JSX.Element {\r\n    return (\r\n        <div className=\"Panel\">\r\n            <div className=\"title\">{ title }</div>\r\n            <div className=\"body\">\r\n                { children }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport \"./PanelGroup.css\";\r\n\r\ninterface IPanelGroupProps {\r\n    children?:React.ReactNode;\r\n}\r\n\r\nexport default function PanelGroup({ children }:IPanelGroupProps):JSX.Element {\r\n    return (\r\n        <div className=\"PanelGroup\">\r\n            { children }\r\n        </div>\r\n    );\r\n}\r\n","import { CREATE_POST, REMOVE_POST } from \"../constants/ActionTypes\";\r\nimport IPost from \"../types/IPost\";\r\n\r\nexport interface CreatePost {\r\n    type:CREATE_POST;\r\n    post:IPost;\r\n}\r\n\r\nexport const createPost = (post:IPost):CreatePost => {\r\n    return {\r\n        type: CREATE_POST,\r\n        post\r\n    };\r\n};\r\n\r\nexport interface RemovePost {\r\n    type:REMOVE_POST;\r\n    post:IPost;\r\n}\r\n\r\nexport const removePost = (post:IPost):RemovePost => {\r\n    return {\r\n        type: REMOVE_POST,\r\n        post\r\n    };\r\n};\r\n\r\nexport type PostActions = (\r\n    CreatePost |\r\n    RemovePost\r\n);\r\n","import { Dispatch } from \"redux\";\r\nimport { CreatePost, createPost, RemovePost, removePost } from \"../actions/PostActions\";\r\nimport IStoreSource from \"../store/IStoreSource\";\r\nimport IDairy from \"../types/IDairy\";\r\n\r\nexport const createPostThunk = (message:string) => {\r\n    return (dispatch:Dispatch<CreatePost>, getState:() => IDairy, source:IStoreSource):CreatePost => {\r\n        return dispatch(createPost(source.createPost(message)));\r\n    };\r\n};\r\n\r\nexport const removePostThunk = (postId:number) => {\r\n    return (dispatch:Dispatch<RemovePost>, getState:() => IDairy, source:IStoreSource):RemovePost => {\r\n        return dispatch(removePost(source.removePost(postId)));\r\n    };\r\n};\r\n","import * as React from \"react\";\r\nimport * as Redux from \"react-redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { CreatePost } from \"../../actions/PostActions\";\r\nimport IStoreSource from \"../../store/IStoreSource\";\r\nimport { createPostThunk } from \"../../thunks/PostThunks\";\r\nimport IDairy from \"../../types/IDairy\";\r\nimport \"./PostsAddForm.css\";\r\n\r\ninterface IPostsAddFormProps {\r\n    dispatch:ThunkDispatch<IDairy, IStoreSource, CreatePost>;\r\n}\r\n\r\nclass PostsAddForm extends React.Component<IPostsAddFormProps> {\r\n    public inputRef:React.RefObject<HTMLInputElement>;\r\n\r\n    public constructor(props:IPostsAddFormProps) {\r\n        super(props);\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    public render():JSX.Element {\r\n        return (\r\n            <form onSubmit={ this.handleSubmit } className=\"PostsAddForm\">\r\n                <input ref={ this.inputRef } type=\"text\" className=\"form-control\" placeholder=\"Type name here\" autoComplete=\"off\" />\r\n                <button className=\"btn btn-info\">Add new</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    private handleSubmit = (event:React.FormEvent):void => {\r\n        event.preventDefault();\r\n\r\n        if (this.inputRef.current != null) {\r\n            const value = this.inputRef.current.value.trim();\r\n            if (value) {\r\n                this.props.dispatch(createPostThunk(value));\r\n                this.inputRef.current.value = '';\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default Redux.connect()(\r\n    PostsAddForm\r\n);\r\n","import { Dispatch } from \"redux\";\r\nimport { SelectPost, selectPost } from \"../actions/DairyActions\";\r\nimport IStoreSource from \"../store/IStoreSource\";\r\nimport IDairy from \"../types/IDairy\";\r\n\r\nexport const selectPostThunk = (postId:number) => {\r\n    return (dispatch:Dispatch<SelectPost>, getState:() => IDairy, source:IStoreSource):SelectPost => {\r\n        return dispatch(selectPost(postId, source.loadNotesList(postId)));\r\n    };\r\n};\r\n","import { SELECT_POST } from \"../constants/ActionTypes\";\r\nimport INotesList from \"../types/INotesList\";\r\n\r\nexport interface SelectPost {\r\n    type:SELECT_POST;\r\n    notesList:INotesList;\r\n    postId:number;\r\n}\r\n\r\nexport const selectPost = (postId:number, notesList:INotesList):SelectPost => {\r\n    return {\r\n        type: SELECT_POST,\r\n        notesList,\r\n        postId\r\n    };\r\n};\r\n\r\nexport type DairyActions = (\r\n    SelectPost\r\n);\r\n","import * as Lodash from \"lodash\";\r\nimport * as React from \"react\";\r\nimport * as Redux from \"react-redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { SelectPost } from \"../../actions/DairyActions\";\r\nimport { RemovePost } from \"../../actions/PostActions\";\r\nimport IStoreSource from \"../../store/IStoreSource\";\r\nimport { selectPostThunk } from \"../../thunks/DairyThunks\";\r\nimport { removePostThunk } from \"../../thunks/PostThunks\";\r\nimport IDairy from \"../../types/IDairy\";\r\nimport IPost from \"../../types/IPost\";\r\nimport \"./PostsListItem.css\";\r\n\r\ninterface IPostsListItemOwnProps {\r\n    post:IPost;\r\n}\r\n\r\ninterface IPostsListItemProps extends IPostsListItemOwnProps {\r\n    dispatch:ThunkDispatch<IDairy, IStoreSource, RemovePost | SelectPost>;\r\n    isSelected:boolean;\r\n    notesNum:number;\r\n}\r\n\r\nclass PostsListItem extends React.Component<IPostsListItemProps> {\r\n    public render():JSX.Element {\r\n        return (\r\n            <div onClick={ this.handleSelectClick } className=\"PostsListItem\">\r\n                { this.props.isSelected ? <div className=\"active\" /> : null }\r\n                <div className=\"title\"><div className=\"title-wrap\">#{ this.props.post.id } - { this.props.post.message }</div> <span className=\"badge badge-info\">{ this.props.notesNum }</span></div>\r\n                <button onClick={ this.handleRemoveClick } className=\"btn btn-outline-danger\">Delete</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleRemoveClick = (event:React.MouseEvent):void => {\r\n        this.props.dispatch(removePostThunk(this.props.post.id));\r\n        event.stopPropagation();\r\n    };\r\n\r\n    private handleSelectClick = (event:React.MouseEvent):void => {\r\n        this.props.dispatch(selectPostThunk(this.props.post.id));\r\n        event.stopPropagation();\r\n    };\r\n}\r\n\r\nexport default Redux.connect(\r\n    (state:IDairy, props:IPostsListItemOwnProps) => {\r\n        return {\r\n            ...props,\r\n            isSelected: props.post.id === state.selectedPostId,\r\n            notesNum: Lodash.values(state.notesList[props.post.id]).length\r\n        }\r\n    }\r\n)(\r\n    PostsListItem\r\n);\r\n","import * as Lodash from \"lodash\";\r\nimport * as React from \"react\";\r\nimport IPost from \"../../types/IPost\";\r\nimport IPostsList from \"../../types/IPostsList\";\r\nimport \"./PostsList.css\";\r\nimport PostsListItem from \"./PostsListItem\";\r\n\r\ninterface IPostsListProps {\r\n    postsList:IPostsList;\r\n}\r\n\r\nexport default function PostsList({ postsList }:IPostsListProps):JSX.Element {\r\n    return (\r\n        <div className=\"PostsList\">\r\n            {\r\n                Lodash.values(postsList).reverse().map(\r\n                    (post:IPost) => {\r\n                        return (\r\n                            <PostsListItem key={ post.id } post={ post } />\r\n                        );\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport \"./Sidebar.css\";\r\n\r\ninterface ISidebarProps {\r\n    description:string;\r\n    title:string;\r\n}\r\n\r\nexport default function Sidebar({ title, description }:ISidebarProps):JSX.Element {\r\n    return (\r\n        <div className=\"Sidebar\">\r\n            <div className=\"title\">{ title }</div>\r\n            <div className=\"description\">{ description }</div>\r\n        </div>\r\n    );\r\n}\r\n","import * as Redux from \"redux\"\r\nimport Thunk from \"redux-thunk\";\r\nimport DairyReducer from \"../reducers/DairyReducer\";\r\nimport NoteReducer from \"../reducers/NoteReducer\";\r\nimport PostReducer from \"../reducers/PostReducer\";\r\nimport IDairy from \"../types/IDairy\";\r\nimport IStoreSource from \"./IStoreSource\";\r\n\r\nexport default (store:IStoreSource):Redux.Store<IDairy> => {\r\n    return Redux.applyMiddleware(\r\n        Thunk.withExtraArgument(store)\r\n    )(\r\n        Redux.createStore\r\n    )(\r\n        Redux.combineReducers({\r\n            selectedPostId: DairyReducer,\r\n            postsList: PostReducer,\r\n            notesList: NoteReducer\r\n        }),\r\n        store.loadDairy()\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport * as Redux from \"react-redux\";\r\nimport IDairy from \"../types/IDairy\";\r\nimport \"./Dairy.css\";\r\nimport NotesAddForm from \"./notes/NotesAddForm\";\r\nimport NotesList from \"./notes/NotesList\";\r\nimport Panel from \"./Panel\";\r\nimport PanelGroup from \"./PanelGroup\";\r\nimport PostsAddForm from \"./posts/PostsAddForm\";\r\nimport PostsList from \"./posts/PostsList\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nclass Dairy extends React.Component<IDairy> {\r\n    public render():JSX.Element {\r\n        return (\r\n            <div className=\"Dairy\">\r\n                <Sidebar title=\"Dairy App\" description=\"Comment with no sense\" />\r\n                <PanelGroup>\r\n                    <Panel title=\"Items\">\r\n                        <PostsAddForm />\r\n                        <PostsList postsList={ this.props.postsList } />\r\n                    </Panel>\r\n                    {\r\n                        (this.props.selectedPostId !== null) ? (\r\n                            <Panel title={ \"Comments #\" + this.props.selectedPostId }>\r\n                                <NotesList notesList={ this.props.notesList[this.props.selectedPostId] } />\r\n                                <NotesAddForm />\r\n                            </Panel>\r\n                        ) : (\r\n                            null\r\n                        )\r\n                    }\r\n                </PanelGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Redux.connect(\r\n    (state:IDairy):IDairy => state\r\n)(\r\n    Dairy\r\n);\r\n","import IDairy from \"../types/IDairy\";\r\nimport IDairyStore from \"../types/IDairyStore\";\r\nimport INote from \"../types/INote\";\r\nimport INotesList from \"../types/INotesList\";\r\nimport IPost from \"../types/IPost\";\r\nimport IPostsList from \"../types/IPostsList\";\r\nimport IStoreSource from \"./IStoreSource\";\r\n\r\nexport default class LocalStoreSource implements IStoreSource {\r\n    private static createInitialState():IDairyStore {\r\n        return {\r\n            selectedPostId: null,\r\n            nextPostId: 1,\r\n            nextNoteId: 1,\r\n            postsList: { },\r\n            notesList: { }\r\n        };\r\n    }\r\n\r\n    private static createDeepClone<T>(value:T):T {\r\n        return JSON.parse(JSON.stringify(value));\r\n    }\r\n\r\n    private state:IDairyStore;\r\n\r\n    public constructor() {\r\n        this.state = LocalStoreSource.createInitialState();\r\n        this.tryLoadState();\r\n    }\r\n\r\n    public loadPostsList():IPostsList {\r\n        return LocalStoreSource.createDeepClone(\r\n            this.state.postsList\r\n        );\r\n    }\r\n\r\n    public createPost(message:string):IPost {\r\n        const postId = this.state.nextPostId++;\r\n        const post = { id: postId, message };\r\n\r\n        this.state.postsList[post.id] = post;\r\n        this.state.notesList[post.id] = { };\r\n        this.trySaveState();\r\n\r\n        return LocalStoreSource.createDeepClone(\r\n            post\r\n        );\r\n    }\r\n\r\n    public removePost(postId:number):IPost {\r\n        const post = this.state.postsList[postId];\r\n\r\n        delete this.state.postsList[postId];\r\n        delete this.state.notesList[postId];\r\n        this.trySaveState();\r\n\r\n        return LocalStoreSource.createDeepClone(\r\n            post\r\n        );\r\n    }\r\n\r\n    public loadNotesList(postId:number):INotesList {\r\n        this.state.selectedPostId = postId;\r\n        this.trySaveState();\r\n\r\n        return LocalStoreSource.createDeepClone(\r\n            this.state.notesList[postId]\r\n        );\r\n    }\r\n\r\n    public createNote(postId:number, message:string):INote {\r\n        const noteId = this.state.nextNoteId++;\r\n        const note = { id: noteId, avatar: Math.ceil(0xFFFFFF * Math.random()), message };\r\n\r\n        this.state.notesList[postId][note.id] = note;\r\n        this.trySaveState();\r\n\r\n        return LocalStoreSource.createDeepClone(\r\n            note\r\n        );\r\n    }\r\n\r\n    public removeNote(postId:number, noteId:number):INote {\r\n        const note = this.state.notesList[postId][noteId];\r\n\r\n        delete this.state.notesList[postId][noteId];\r\n        this.trySaveState();\r\n\r\n        return LocalStoreSource.createDeepClone(\r\n            note\r\n        );\r\n    }\r\n\r\n    public loadDairy():IDairy {\r\n        return {\r\n            selectedPostId: this.state.selectedPostId,\r\n            postsList: this.state.postsList,\r\n            notesList: this.state.notesList\r\n        };\r\n    }\r\n\r\n    private tryLoadState():void {\r\n        if (localStorage && localStorage.state) {\r\n            this.state = JSON.parse(localStorage.state);\r\n        }\r\n    }\r\n\r\n    private trySaveState():void {\r\n        if (localStorage) {\r\n            localStorage.state = JSON.stringify(this.state);\r\n        }\r\n    }\r\n}\r\n","import { DairyActions } from \"../actions/DairyActions\";\r\nimport { RemovePost } from \"../actions/PostActions\";\r\nimport { REMOVE_POST, SELECT_POST } from \"../constants/ActionTypes\";\r\nimport { IPostSelect } from \"../types/IPostSelect\";\r\n\r\nexport default (state:IPostSelect, action:DairyActions | RemovePost):IPostSelect => {\r\n    switch (action.type) {\r\n        case SELECT_POST: {\r\n            return action.postId;\r\n        }\r\n\r\n        case REMOVE_POST: {\r\n            if (action.post.id === state) {\r\n                return null;\r\n            }\r\n\r\n            return state;\r\n        }\r\n\r\n        default: {\r\n            return state || null;\r\n        }\r\n    }\r\n};\r\n","import * as Lodash from \"lodash\";\r\nimport { SelectPost } from \"../actions/DairyActions\";\r\nimport { NoteActions } from \"../actions/NoteActions\";\r\nimport { PostActions } from \"../actions/PostActions\";\r\nimport { CREATE_NOTE, CREATE_POST, REMOVE_NOTE, REMOVE_POST, SELECT_POST } from \"../constants/ActionTypes\";\r\nimport IPostNotesList from \"../types/IPostNotesList\";\r\n\r\nexport default (state:IPostNotesList, action:PostActions | NoteActions | SelectPost):IPostNotesList => {\r\n    switch (action.type) {\r\n        case CREATE_POST: {\r\n            return {\r\n                ...state,\r\n                [action.post.id]: { }\r\n            };\r\n        }\r\n\r\n        case REMOVE_POST: {\r\n            return Lodash.omit(\r\n                state,\r\n                [ action.post.id ]\r\n            );\r\n        }\r\n\r\n        case CREATE_NOTE: {\r\n            return {\r\n                ...state,\r\n                [action.postId]: {\r\n                    ...state[action.postId],\r\n                    [action.note.id]: action.note\r\n                }\r\n            };\r\n        }\r\n\r\n        case REMOVE_NOTE: {\r\n            return {\r\n                ...state,\r\n                [action.postId]: Lodash.omit(\r\n                    state[action.postId],\r\n                    [ action.note.id ]\r\n                )\r\n            };\r\n        }\r\n\r\n        case SELECT_POST: {\r\n            return {\r\n                ...state,\r\n                [action.postId]: action.notesList\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state || { };\r\n        }\r\n    }\r\n};","import * as Lodash from \"lodash\";\r\nimport { NoteActions } from \"../actions/NoteActions\";\r\nimport { PostActions } from \"../actions/PostActions\";\r\nimport { CREATE_POST, REMOVE_POST } from \"../constants/ActionTypes\";\r\nimport IPostsList from \"../types/IPostsList\";\r\n\r\nexport default (state:IPostsList, action:PostActions | NoteActions):IPostsList => {\r\n    switch (action.type) {\r\n        case CREATE_POST: {\r\n            return {\r\n                ...state,\r\n                [action.post.id]: action.post\r\n            };\r\n        }\r\n\r\n        case REMOVE_POST: {\r\n            return Lodash.omit(\r\n                state,\r\n                [ action.post.id ]\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return state || { };\r\n        }\r\n    }\r\n};\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport Dairy from \"./components/Dairy\";\r\nimport \"./index.css\";\r\nimport LocalStoreSource from \"./store/LocalStoreSource\";\r\nimport Store from \"./store/Store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={ Store(new LocalStoreSource()) }><Dairy /></Provider>,\r\n    document.querySelector<HTMLElement>(\"#root\")\r\n);\r\n"],"sourceRoot":""}